// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"doublequote/pkg/asynq"
	"doublequote/pkg/blob"
	"doublequote/pkg/crypto"
	"doublequote/pkg/domain"
	"doublequote/pkg/http"
	"doublequote/pkg/ingest"
	redis2 "doublequote/pkg/redis"
	sql2 "doublequote/pkg/sql"
)

// Injectors from wire.go:

func initializeApplication(cfg *domain.Config) (*application, func(), error) {
	sqlSQL, cleanup, err := setupSQL(cfg)
	if err != nil {
		return nil, nil, err
	}
	eventService, cleanup2, err := setupEventService(cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	cryptoService := setupCryptoService(cfg)
	userService := sql2.NewUserService(sqlSQL, eventService, cryptoService)
	cacheService, err := setupCache(cfg)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sessionService := redis2.NewSessionService(cacheService)
	entryService := setupEntryService(sqlSQL)
	storageService, cleanup3, err := setupStorageService(cfg)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	feedService := setupFeedService(sqlSQL)
	ingestService := setupIngestService(feedService, entryService, storageService)
	collectionService := sql2.NewCollectionService(sqlSQL)
	server, cleanup4, err := setupServer(cfg, userService, cryptoService, sessionService, storageService, ingestService, collectionService, feedService)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mainApplication := newApplication(userService, cryptoService, sessionService, entryService, storageService, server)
	return mainApplication, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type application struct {
	userService       domain.UserService
	cryptoService     domain.CryptoService
	sessionService    domain.SessionService
	collectionService domain.CollectionService
	entryService      domain.EntryService
	storageService    domain.StorageService
	ingestService     domain.IngestService

	httpServer *http.Server
}

func setupSQL(cfg *domain.Config) (*sql2.SQL, func(), error) {
	d := sql2.NewSQL(cfg.Database.URL)

	err := d.Open()
	if err != nil {
		return nil, nil, err
	}

	return d, func() {
		d.Close()
	}, nil
}

func setupCache(cfg *domain.Config) (*redis2.CacheService, error) {
	d := redis2.NewCache(cfg.Redis.URL)

	return d, nil
}

func setupEventService(cfg *domain.Config) (domain.EventService, func(), error) {
	s := asynq.NewEventService(cfg.Redis.URL)

	err := s.Open()
	if err != nil {
		return nil, nil, err
	}

	return s, func() {
		s.Close()
	}, nil
}

func setupCryptoService(cfg *domain.Config) domain.CryptoService {
	s := crypto.NewService(cfg.App.Secret)
	return s
}

func setupServer(
	cfg *domain.Config,
	userService domain.UserService,
	cryptoService domain.CryptoService,
	sessionService domain.SessionService,
	storageService domain.StorageService,
	ingestService domain.IngestService,
	collectionService domain.CollectionService,
	feedService domain.FeedService,
) (*http.Server, func(), error) {
	s := http.NewServer()

	s.CryptoService = cryptoService
	s.UserService = userService
	s.SessionService = sessionService
	s.CollectionService = collectionService
	s.FeedService = feedService
	s.StorageService = storageService
	s.IngestService = ingestService
	s.Config = *cfg

	err := s.Open()
	if err != nil {
		return nil, nil, err
	}

	return s, func() {
		s.Close()
	}, nil
}

func setupFeedService(
	s *sql2.SQL,
) domain.FeedService {
	return sql2.NewFeedService(s)
}

func setupEntryService(
	s *sql2.SQL,
) domain.EntryService {
	return sql2.NewEntryService(s)
}

func setupIngestService(
	feedService domain.FeedService,
	entryService domain.EntryService,
	storageService domain.StorageService,
) domain.IngestService {
	return ingest.NewService(feedService, entryService, storageService)
}

func setupStorageService(
	cfg *domain.Config,
) (domain.StorageService, func(), error) {
	a, b, c := blob.NewStorageService(cfg.App.DataFolder)
	return a, func() {
		b()
	}, c
}

func newApplication(
	userService domain.UserService,
	cryptoService domain.CryptoService,
	sessionService domain.SessionService,
	entryService domain.EntryService,
	storageService domain.StorageService,
	server *http.Server,
) *application {
	return &application{
		userService:    userService,
		cryptoService:  cryptoService,
		sessionService: sessionService,
		entryService:   entryService,
		storageService: storageService,
		httpServer:     server,
	}
}
