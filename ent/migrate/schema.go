// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CollectionsColumns holds the columns for the "collections" table.
	CollectionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_collections", Type: field.TypeInt, Nullable: true},
	}
	// CollectionsTable holds the schema information for the "collections" table.
	CollectionsTable = &schema.Table{
		Name:       "collections",
		Columns:    CollectionsColumns,
		PrimaryKey: []*schema.Column{CollectionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "collections_users_collections",
				Columns:    []*schema.Column{CollectionsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CollectionEntriesColumns holds the columns for the "collection_entries" table.
	CollectionEntriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "is_read", Type: field.TypeBool, Default: false},
		{Name: "collection_id", Type: field.TypeInt},
		{Name: "entry_id", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// CollectionEntriesTable holds the schema information for the "collection_entries" table.
	CollectionEntriesTable = &schema.Table{
		Name:       "collection_entries",
		Columns:    CollectionEntriesColumns,
		PrimaryKey: []*schema.Column{CollectionEntriesColumns[0]},
	}
	// EntriesColumns holds the columns for the "entries" table.
	EntriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "author", Type: field.TypeString},
		{Name: "content_key", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "feed_entries", Type: field.TypeInt, Nullable: true},
	}
	// EntriesTable holds the schema information for the "entries" table.
	EntriesTable = &schema.Table{
		Name:       "entries",
		Columns:    EntriesColumns,
		PrimaryKey: []*schema.Column{EntriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entries_feeds_entries",
				Columns:    []*schema.Column{EntriesColumns[7]},
				RefColumns: []*schema.Column{FeedsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FeedsColumns holds the columns for the "feeds" table.
	FeedsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "rss_url", Type: field.TypeString},
		{Name: "domain", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// FeedsTable holds the schema information for the "feeds" table.
	FeedsTable = &schema.Table{
		Name:       "feeds",
		Columns:    FeedsColumns,
		PrimaryKey: []*schema.Column{FeedsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email_verified_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// CollectionCollectionEntriesColumns holds the columns for the "collection_collection_entries" table.
	CollectionCollectionEntriesColumns = []*schema.Column{
		{Name: "collection_id", Type: field.TypeInt},
		{Name: "collection_entry_id", Type: field.TypeInt},
	}
	// CollectionCollectionEntriesTable holds the schema information for the "collection_collection_entries" table.
	CollectionCollectionEntriesTable = &schema.Table{
		Name:       "collection_collection_entries",
		Columns:    CollectionCollectionEntriesColumns,
		PrimaryKey: []*schema.Column{CollectionCollectionEntriesColumns[0], CollectionCollectionEntriesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "collection_collection_entries_collection_id",
				Columns:    []*schema.Column{CollectionCollectionEntriesColumns[0]},
				RefColumns: []*schema.Column{CollectionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "collection_collection_entries_collection_entry_id",
				Columns:    []*schema.Column{CollectionCollectionEntriesColumns[1]},
				RefColumns: []*schema.Column{CollectionEntriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CollectionFeedsColumns holds the columns for the "collection_feeds" table.
	CollectionFeedsColumns = []*schema.Column{
		{Name: "collection_id", Type: field.TypeInt},
		{Name: "feed_id", Type: field.TypeInt},
	}
	// CollectionFeedsTable holds the schema information for the "collection_feeds" table.
	CollectionFeedsTable = &schema.Table{
		Name:       "collection_feeds",
		Columns:    CollectionFeedsColumns,
		PrimaryKey: []*schema.Column{CollectionFeedsColumns[0], CollectionFeedsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "collection_feeds_collection_id",
				Columns:    []*schema.Column{CollectionFeedsColumns[0]},
				RefColumns: []*schema.Column{CollectionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "collection_feeds_feed_id",
				Columns:    []*schema.Column{CollectionFeedsColumns[1]},
				RefColumns: []*schema.Column{FeedsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EntryCollectionEntriesColumns holds the columns for the "entry_collection_entries" table.
	EntryCollectionEntriesColumns = []*schema.Column{
		{Name: "entry_id", Type: field.TypeInt},
		{Name: "collection_entry_id", Type: field.TypeInt},
	}
	// EntryCollectionEntriesTable holds the schema information for the "entry_collection_entries" table.
	EntryCollectionEntriesTable = &schema.Table{
		Name:       "entry_collection_entries",
		Columns:    EntryCollectionEntriesColumns,
		PrimaryKey: []*schema.Column{EntryCollectionEntriesColumns[0], EntryCollectionEntriesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entry_collection_entries_entry_id",
				Columns:    []*schema.Column{EntryCollectionEntriesColumns[0]},
				RefColumns: []*schema.Column{EntriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "entry_collection_entries_collection_entry_id",
				Columns:    []*schema.Column{EntryCollectionEntriesColumns[1]},
				RefColumns: []*schema.Column{CollectionEntriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CollectionsTable,
		CollectionEntriesTable,
		EntriesTable,
		FeedsTable,
		UsersTable,
		CollectionCollectionEntriesTable,
		CollectionFeedsTable,
		EntryCollectionEntriesTable,
	}
)

func init() {
	CollectionsTable.ForeignKeys[0].RefTable = UsersTable
	EntriesTable.ForeignKeys[0].RefTable = FeedsTable
	CollectionCollectionEntriesTable.ForeignKeys[0].RefTable = CollectionsTable
	CollectionCollectionEntriesTable.ForeignKeys[1].RefTable = CollectionEntriesTable
	CollectionFeedsTable.ForeignKeys[0].RefTable = CollectionsTable
	CollectionFeedsTable.ForeignKeys[1].RefTable = FeedsTable
	EntryCollectionEntriesTable.ForeignKeys[0].RefTable = EntriesTable
	EntryCollectionEntriesTable.ForeignKeys[1].RefTable = CollectionEntriesTable
}
