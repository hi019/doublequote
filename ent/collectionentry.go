// Code generated by entc, DO NOT EDIT.

package ent

import (
	"doublequote/ent/collection"
	"doublequote/ent/collectionentry"
	"doublequote/ent/entry"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CollectionEntry is the model entity for the CollectionEntry schema.
type CollectionEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IsRead holds the value of the "is_read" field.
	IsRead bool `json:"is_read,omitempty"`
	// CollectionID holds the value of the "collection_id" field.
	CollectionID int `json:"collection_id,omitempty"`
	// EntryID holds the value of the "entry_id" field.
	EntryID int `json:"entry_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CollectionEntryQuery when eager-loading is set.
	Edges CollectionEntryEdges `json:"edges"`
}

// CollectionEntryEdges holds the relations/edges for other nodes in the graph.
type CollectionEntryEdges struct {
	// Collection holds the value of the collection edge.
	Collection *Collection `json:"collection,omitempty"`
	// Entry holds the value of the entry edge.
	Entry *Entry `json:"entry,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CollectionOrErr returns the Collection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CollectionEntryEdges) CollectionOrErr() (*Collection, error) {
	if e.loadedTypes[0] {
		if e.Collection == nil {
			// The edge collection was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: collection.Label}
		}
		return e.Collection, nil
	}
	return nil, &NotLoadedError{edge: "collection"}
}

// EntryOrErr returns the Entry value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CollectionEntryEdges) EntryOrErr() (*Entry, error) {
	if e.loadedTypes[1] {
		if e.Entry == nil {
			// The edge entry was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: entry.Label}
		}
		return e.Entry, nil
	}
	return nil, &NotLoadedError{edge: "entry"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CollectionEntry) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case collectionentry.FieldIsRead:
			values[i] = new(sql.NullBool)
		case collectionentry.FieldID, collectionentry.FieldCollectionID, collectionentry.FieldEntryID:
			values[i] = new(sql.NullInt64)
		case collectionentry.FieldCreatedAt, collectionentry.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CollectionEntry", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CollectionEntry fields.
func (ce *CollectionEntry) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case collectionentry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ce.ID = int(value.Int64)
		case collectionentry.FieldIsRead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_read", values[i])
			} else if value.Valid {
				ce.IsRead = value.Bool
			}
		case collectionentry.FieldCollectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field collection_id", values[i])
			} else if value.Valid {
				ce.CollectionID = int(value.Int64)
			}
		case collectionentry.FieldEntryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field entry_id", values[i])
			} else if value.Valid {
				ce.EntryID = int(value.Int64)
			}
		case collectionentry.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ce.CreatedAt = value.Time
			}
		case collectionentry.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ce.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCollection queries the "collection" edge of the CollectionEntry entity.
func (ce *CollectionEntry) QueryCollection() *CollectionQuery {
	return (&CollectionEntryClient{config: ce.config}).QueryCollection(ce)
}

// QueryEntry queries the "entry" edge of the CollectionEntry entity.
func (ce *CollectionEntry) QueryEntry() *EntryQuery {
	return (&CollectionEntryClient{config: ce.config}).QueryEntry(ce)
}

// Update returns a builder for updating this CollectionEntry.
// Note that you need to call CollectionEntry.Unwrap() before calling this method if this CollectionEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *CollectionEntry) Update() *CollectionEntryUpdateOne {
	return (&CollectionEntryClient{config: ce.config}).UpdateOne(ce)
}

// Unwrap unwraps the CollectionEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ce *CollectionEntry) Unwrap() *CollectionEntry {
	tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: CollectionEntry is not a transactional entity")
	}
	ce.config.driver = tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *CollectionEntry) String() string {
	var builder strings.Builder
	builder.WriteString("CollectionEntry(")
	builder.WriteString(fmt.Sprintf("id=%v", ce.ID))
	builder.WriteString(", is_read=")
	builder.WriteString(fmt.Sprintf("%v", ce.IsRead))
	builder.WriteString(", collection_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.CollectionID))
	builder.WriteString(", entry_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.EntryID))
	builder.WriteString(", created_at=")
	builder.WriteString(ce.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ce.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CollectionEntries is a parsable slice of CollectionEntry.
type CollectionEntries []*CollectionEntry

func (ce CollectionEntries) config(cfg config) {
	for _i := range ce {
		ce[_i].config = cfg
	}
}
