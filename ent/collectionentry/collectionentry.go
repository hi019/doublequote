// Code generated by entc, DO NOT EDIT.

package collectionentry

import (
	"time"
)

const (
	// Label holds the string label denoting the collectionentry type in the database.
	Label = "collection_entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIsRead holds the string denoting the is_read field in the database.
	FieldIsRead = "is_read"
	// FieldCollectionID holds the string denoting the collection_id field in the database.
	FieldCollectionID = "collection_id"
	// FieldEntryID holds the string denoting the entry_id field in the database.
	FieldEntryID = "entry_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCollection holds the string denoting the collection edge name in mutations.
	EdgeCollection = "collection"
	// EdgeEntry holds the string denoting the entry edge name in mutations.
	EdgeEntry = "entry"
	// Table holds the table name of the collectionentry in the database.
	Table = "collection_entries"
	// CollectionTable is the table that holds the collection relation/edge.
	CollectionTable = "collection_entries"
	// CollectionInverseTable is the table name for the Collection entity.
	// It exists in this package in order to avoid circular dependency with the "collection" package.
	CollectionInverseTable = "collections"
	// CollectionColumn is the table column denoting the collection relation/edge.
	CollectionColumn = "collection_id"
	// EntryTable is the table that holds the entry relation/edge.
	EntryTable = "collection_entries"
	// EntryInverseTable is the table name for the Entry entity.
	// It exists in this package in order to avoid circular dependency with the "entry" package.
	EntryInverseTable = "entries"
	// EntryColumn is the table column denoting the entry relation/edge.
	EntryColumn = "entry_id"
)

// Columns holds all SQL columns for collectionentry fields.
var Columns = []string{
	FieldID,
	FieldIsRead,
	FieldCollectionID,
	FieldEntryID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsRead holds the default value on creation for the "is_read" field.
	DefaultIsRead bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
