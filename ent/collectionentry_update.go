// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"doublequote/ent/collection"
	"doublequote/ent/collectionentry"
	"doublequote/ent/entry"
	"doublequote/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectionEntryUpdate is the builder for updating CollectionEntry entities.
type CollectionEntryUpdate struct {
	config
	hooks    []Hook
	mutation *CollectionEntryMutation
}

// Where appends a list predicates to the CollectionEntryUpdate builder.
func (ceu *CollectionEntryUpdate) Where(ps ...predicate.CollectionEntry) *CollectionEntryUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetIsRead sets the "is_read" field.
func (ceu *CollectionEntryUpdate) SetIsRead(b bool) *CollectionEntryUpdate {
	ceu.mutation.SetIsRead(b)
	return ceu
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (ceu *CollectionEntryUpdate) SetNillableIsRead(b *bool) *CollectionEntryUpdate {
	if b != nil {
		ceu.SetIsRead(*b)
	}
	return ceu
}

// SetCollectionID sets the "collection_id" field.
func (ceu *CollectionEntryUpdate) SetCollectionID(i int) *CollectionEntryUpdate {
	ceu.mutation.SetCollectionID(i)
	return ceu
}

// SetEntryID sets the "entry_id" field.
func (ceu *CollectionEntryUpdate) SetEntryID(i int) *CollectionEntryUpdate {
	ceu.mutation.SetEntryID(i)
	return ceu
}

// SetUpdatedAt sets the "updated_at" field.
func (ceu *CollectionEntryUpdate) SetUpdatedAt(t time.Time) *CollectionEntryUpdate {
	ceu.mutation.SetUpdatedAt(t)
	return ceu
}

// SetCollection sets the "collection" edge to the Collection entity.
func (ceu *CollectionEntryUpdate) SetCollection(c *Collection) *CollectionEntryUpdate {
	return ceu.SetCollectionID(c.ID)
}

// SetEntry sets the "entry" edge to the Entry entity.
func (ceu *CollectionEntryUpdate) SetEntry(e *Entry) *CollectionEntryUpdate {
	return ceu.SetEntryID(e.ID)
}

// Mutation returns the CollectionEntryMutation object of the builder.
func (ceu *CollectionEntryUpdate) Mutation() *CollectionEntryMutation {
	return ceu.mutation
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (ceu *CollectionEntryUpdate) ClearCollection() *CollectionEntryUpdate {
	ceu.mutation.ClearCollection()
	return ceu
}

// ClearEntry clears the "entry" edge to the Entry entity.
func (ceu *CollectionEntryUpdate) ClearEntry() *CollectionEntryUpdate {
	ceu.mutation.ClearEntry()
	return ceu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *CollectionEntryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ceu.defaults()
	if len(ceu.hooks) == 0 {
		if err = ceu.check(); err != nil {
			return 0, err
		}
		affected, err = ceu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CollectionEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceu.check(); err != nil {
				return 0, err
			}
			ceu.mutation = mutation
			affected, err = ceu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ceu.hooks) - 1; i >= 0; i-- {
			if ceu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *CollectionEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *CollectionEntryUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *CollectionEntryUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceu *CollectionEntryUpdate) defaults() {
	if _, ok := ceu.mutation.UpdatedAt(); !ok {
		v := collectionentry.UpdateDefaultUpdatedAt()
		ceu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceu *CollectionEntryUpdate) check() error {
	if _, ok := ceu.mutation.CollectionID(); ceu.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CollectionEntry.collection"`)
	}
	if _, ok := ceu.mutation.EntryID(); ceu.mutation.EntryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CollectionEntry.entry"`)
	}
	return nil
}

func (ceu *CollectionEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   collectionentry.Table,
			Columns: collectionentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: collectionentry.FieldID,
			},
		},
	}
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.IsRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: collectionentry.FieldIsRead,
		})
	}
	if value, ok := ceu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collectionentry.FieldUpdatedAt,
		})
	}
	if ceu.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectionentry.CollectionTable,
			Columns: []string{collectionentry.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectionentry.CollectionTable,
			Columns: []string{collectionentry.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.EntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectionentry.EntryTable,
			Columns: []string{collectionentry.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.EntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectionentry.EntryTable,
			Columns: []string{collectionentry.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectionentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CollectionEntryUpdateOne is the builder for updating a single CollectionEntry entity.
type CollectionEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectionEntryMutation
}

// SetIsRead sets the "is_read" field.
func (ceuo *CollectionEntryUpdateOne) SetIsRead(b bool) *CollectionEntryUpdateOne {
	ceuo.mutation.SetIsRead(b)
	return ceuo
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (ceuo *CollectionEntryUpdateOne) SetNillableIsRead(b *bool) *CollectionEntryUpdateOne {
	if b != nil {
		ceuo.SetIsRead(*b)
	}
	return ceuo
}

// SetCollectionID sets the "collection_id" field.
func (ceuo *CollectionEntryUpdateOne) SetCollectionID(i int) *CollectionEntryUpdateOne {
	ceuo.mutation.SetCollectionID(i)
	return ceuo
}

// SetEntryID sets the "entry_id" field.
func (ceuo *CollectionEntryUpdateOne) SetEntryID(i int) *CollectionEntryUpdateOne {
	ceuo.mutation.SetEntryID(i)
	return ceuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ceuo *CollectionEntryUpdateOne) SetUpdatedAt(t time.Time) *CollectionEntryUpdateOne {
	ceuo.mutation.SetUpdatedAt(t)
	return ceuo
}

// SetCollection sets the "collection" edge to the Collection entity.
func (ceuo *CollectionEntryUpdateOne) SetCollection(c *Collection) *CollectionEntryUpdateOne {
	return ceuo.SetCollectionID(c.ID)
}

// SetEntry sets the "entry" edge to the Entry entity.
func (ceuo *CollectionEntryUpdateOne) SetEntry(e *Entry) *CollectionEntryUpdateOne {
	return ceuo.SetEntryID(e.ID)
}

// Mutation returns the CollectionEntryMutation object of the builder.
func (ceuo *CollectionEntryUpdateOne) Mutation() *CollectionEntryMutation {
	return ceuo.mutation
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (ceuo *CollectionEntryUpdateOne) ClearCollection() *CollectionEntryUpdateOne {
	ceuo.mutation.ClearCollection()
	return ceuo
}

// ClearEntry clears the "entry" edge to the Entry entity.
func (ceuo *CollectionEntryUpdateOne) ClearEntry() *CollectionEntryUpdateOne {
	ceuo.mutation.ClearEntry()
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *CollectionEntryUpdateOne) Select(field string, fields ...string) *CollectionEntryUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated CollectionEntry entity.
func (ceuo *CollectionEntryUpdateOne) Save(ctx context.Context) (*CollectionEntry, error) {
	var (
		err  error
		node *CollectionEntry
	)
	ceuo.defaults()
	if len(ceuo.hooks) == 0 {
		if err = ceuo.check(); err != nil {
			return nil, err
		}
		node, err = ceuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CollectionEntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceuo.check(); err != nil {
				return nil, err
			}
			ceuo.mutation = mutation
			node, err = ceuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ceuo.hooks) - 1; i >= 0; i-- {
			if ceuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *CollectionEntryUpdateOne) SaveX(ctx context.Context) *CollectionEntry {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *CollectionEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *CollectionEntryUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceuo *CollectionEntryUpdateOne) defaults() {
	if _, ok := ceuo.mutation.UpdatedAt(); !ok {
		v := collectionentry.UpdateDefaultUpdatedAt()
		ceuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceuo *CollectionEntryUpdateOne) check() error {
	if _, ok := ceuo.mutation.CollectionID(); ceuo.mutation.CollectionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CollectionEntry.collection"`)
	}
	if _, ok := ceuo.mutation.EntryID(); ceuo.mutation.EntryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CollectionEntry.entry"`)
	}
	return nil
}

func (ceuo *CollectionEntryUpdateOne) sqlSave(ctx context.Context) (_node *CollectionEntry, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   collectionentry.Table,
			Columns: collectionentry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: collectionentry.FieldID,
			},
		},
	}
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CollectionEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collectionentry.FieldID)
		for _, f := range fields {
			if !collectionentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collectionentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.IsRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: collectionentry.FieldIsRead,
		})
	}
	if value, ok := ceuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: collectionentry.FieldUpdatedAt,
		})
	}
	if ceuo.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectionentry.CollectionTable,
			Columns: []string{collectionentry.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectionentry.CollectionTable,
			Columns: []string{collectionentry.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.EntryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectionentry.EntryTable,
			Columns: []string{collectionentry.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.EntryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   collectionentry.EntryTable,
			Columns: []string{collectionentry.EntryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CollectionEntry{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectionentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
