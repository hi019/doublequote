// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"doublequote/ent/collectionentry"
	"doublequote/ent/entry"
	"doublequote/ent/feed"
	"doublequote/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntryUpdate is the builder for updating Entry entities.
type EntryUpdate struct {
	config
	hooks    []Hook
	mutation *EntryMutation
}

// Where appends a list predicates to the EntryUpdate builder.
func (eu *EntryUpdate) Where(ps ...predicate.Entry) *EntryUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTitle sets the "title" field.
func (eu *EntryUpdate) SetTitle(s string) *EntryUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetURL sets the "url" field.
func (eu *EntryUpdate) SetURL(s string) *EntryUpdate {
	eu.mutation.SetURL(s)
	return eu
}

// SetAuthor sets the "author" field.
func (eu *EntryUpdate) SetAuthor(s string) *EntryUpdate {
	eu.mutation.SetAuthor(s)
	return eu
}

// SetContentKey sets the "content_key" field.
func (eu *EntryUpdate) SetContentKey(s string) *EntryUpdate {
	eu.mutation.SetContentKey(s)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EntryUpdate) SetUpdatedAt(t time.Time) *EntryUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (eu *EntryUpdate) SetFeedID(id int) *EntryUpdate {
	eu.mutation.SetFeedID(id)
	return eu
}

// SetNillableFeedID sets the "feed" edge to the Feed entity by ID if the given value is not nil.
func (eu *EntryUpdate) SetNillableFeedID(id *int) *EntryUpdate {
	if id != nil {
		eu = eu.SetFeedID(*id)
	}
	return eu
}

// SetFeed sets the "feed" edge to the Feed entity.
func (eu *EntryUpdate) SetFeed(f *Feed) *EntryUpdate {
	return eu.SetFeedID(f.ID)
}

// AddCollectionEntryIDs adds the "collection_entries" edge to the CollectionEntry entity by IDs.
func (eu *EntryUpdate) AddCollectionEntryIDs(ids ...int) *EntryUpdate {
	eu.mutation.AddCollectionEntryIDs(ids...)
	return eu
}

// AddCollectionEntries adds the "collection_entries" edges to the CollectionEntry entity.
func (eu *EntryUpdate) AddCollectionEntries(c ...*CollectionEntry) *EntryUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCollectionEntryIDs(ids...)
}

// Mutation returns the EntryMutation object of the builder.
func (eu *EntryUpdate) Mutation() *EntryMutation {
	return eu.mutation
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (eu *EntryUpdate) ClearFeed() *EntryUpdate {
	eu.mutation.ClearFeed()
	return eu
}

// ClearCollectionEntries clears all "collection_entries" edges to the CollectionEntry entity.
func (eu *EntryUpdate) ClearCollectionEntries() *EntryUpdate {
	eu.mutation.ClearCollectionEntries()
	return eu
}

// RemoveCollectionEntryIDs removes the "collection_entries" edge to CollectionEntry entities by IDs.
func (eu *EntryUpdate) RemoveCollectionEntryIDs(ids ...int) *EntryUpdate {
	eu.mutation.RemoveCollectionEntryIDs(ids...)
	return eu
}

// RemoveCollectionEntries removes "collection_entries" edges to CollectionEntry entities.
func (eu *EntryUpdate) RemoveCollectionEntries(c ...*CollectionEntry) *EntryUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCollectionEntryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntryUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntryUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntryUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EntryUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := entry.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

func (eu *EntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entry.Table,
			Columns: entry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entry.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entry.FieldTitle,
		})
	}
	if value, ok := eu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entry.FieldURL,
		})
	}
	if value, ok := eu.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entry.FieldAuthor,
		})
	}
	if value, ok := eu.mutation.ContentKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entry.FieldContentKey,
		})
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entry.FieldUpdatedAt,
		})
	}
	if eu.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entry.FeedTable,
			Columns: []string{entry.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entry.FeedTable,
			Columns: []string{entry.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CollectionEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entry.CollectionEntriesTable,
			Columns: entry.CollectionEntriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collectionentry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCollectionEntriesIDs(); len(nodes) > 0 && !eu.mutation.CollectionEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entry.CollectionEntriesTable,
			Columns: entry.CollectionEntriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collectionentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CollectionEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entry.CollectionEntriesTable,
			Columns: entry.CollectionEntriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collectionentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EntryUpdateOne is the builder for updating a single Entry entity.
type EntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntryMutation
}

// SetTitle sets the "title" field.
func (euo *EntryUpdateOne) SetTitle(s string) *EntryUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetURL sets the "url" field.
func (euo *EntryUpdateOne) SetURL(s string) *EntryUpdateOne {
	euo.mutation.SetURL(s)
	return euo
}

// SetAuthor sets the "author" field.
func (euo *EntryUpdateOne) SetAuthor(s string) *EntryUpdateOne {
	euo.mutation.SetAuthor(s)
	return euo
}

// SetContentKey sets the "content_key" field.
func (euo *EntryUpdateOne) SetContentKey(s string) *EntryUpdateOne {
	euo.mutation.SetContentKey(s)
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EntryUpdateOne) SetUpdatedAt(t time.Time) *EntryUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (euo *EntryUpdateOne) SetFeedID(id int) *EntryUpdateOne {
	euo.mutation.SetFeedID(id)
	return euo
}

// SetNillableFeedID sets the "feed" edge to the Feed entity by ID if the given value is not nil.
func (euo *EntryUpdateOne) SetNillableFeedID(id *int) *EntryUpdateOne {
	if id != nil {
		euo = euo.SetFeedID(*id)
	}
	return euo
}

// SetFeed sets the "feed" edge to the Feed entity.
func (euo *EntryUpdateOne) SetFeed(f *Feed) *EntryUpdateOne {
	return euo.SetFeedID(f.ID)
}

// AddCollectionEntryIDs adds the "collection_entries" edge to the CollectionEntry entity by IDs.
func (euo *EntryUpdateOne) AddCollectionEntryIDs(ids ...int) *EntryUpdateOne {
	euo.mutation.AddCollectionEntryIDs(ids...)
	return euo
}

// AddCollectionEntries adds the "collection_entries" edges to the CollectionEntry entity.
func (euo *EntryUpdateOne) AddCollectionEntries(c ...*CollectionEntry) *EntryUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCollectionEntryIDs(ids...)
}

// Mutation returns the EntryMutation object of the builder.
func (euo *EntryUpdateOne) Mutation() *EntryMutation {
	return euo.mutation
}

// ClearFeed clears the "feed" edge to the Feed entity.
func (euo *EntryUpdateOne) ClearFeed() *EntryUpdateOne {
	euo.mutation.ClearFeed()
	return euo
}

// ClearCollectionEntries clears all "collection_entries" edges to the CollectionEntry entity.
func (euo *EntryUpdateOne) ClearCollectionEntries() *EntryUpdateOne {
	euo.mutation.ClearCollectionEntries()
	return euo
}

// RemoveCollectionEntryIDs removes the "collection_entries" edge to CollectionEntry entities by IDs.
func (euo *EntryUpdateOne) RemoveCollectionEntryIDs(ids ...int) *EntryUpdateOne {
	euo.mutation.RemoveCollectionEntryIDs(ids...)
	return euo
}

// RemoveCollectionEntries removes "collection_entries" edges to CollectionEntry entities.
func (euo *EntryUpdateOne) RemoveCollectionEntries(c ...*CollectionEntry) *EntryUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCollectionEntryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntryUpdateOne) Select(field string, fields ...string) *EntryUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entry entity.
func (euo *EntryUpdateOne) Save(ctx context.Context) (*Entry, error) {
	var (
		err  error
		node *Entry
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntryUpdateOne) SaveX(ctx context.Context) *Entry {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntryUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntryUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EntryUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := entry.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

func (euo *EntryUpdateOne) sqlSave(ctx context.Context) (_node *Entry, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entry.Table,
			Columns: entry.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entry.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entry.FieldID)
		for _, f := range fields {
			if !entry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entry.FieldTitle,
		})
	}
	if value, ok := euo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entry.FieldURL,
		})
	}
	if value, ok := euo.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entry.FieldAuthor,
		})
	}
	if value, ok := euo.mutation.ContentKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entry.FieldContentKey,
		})
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entry.FieldUpdatedAt,
		})
	}
	if euo.mutation.FeedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entry.FeedTable,
			Columns: []string{entry.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feed.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entry.FeedTable,
			Columns: []string{entry.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: feed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CollectionEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entry.CollectionEntriesTable,
			Columns: entry.CollectionEntriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collectionentry.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCollectionEntriesIDs(); len(nodes) > 0 && !euo.mutation.CollectionEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entry.CollectionEntriesTable,
			Columns: entry.CollectionEntriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collectionentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CollectionEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entry.CollectionEntriesTable,
			Columns: entry.CollectionEntriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: collectionentry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Entry{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
