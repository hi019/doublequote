// Code generated by mockery 2.9.4. DO NOT EDIT.

package mock

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// CacheService is an autogenerated mock type for the CacheService type
type CacheService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, key
func (_m *CacheService) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInt provides a mock function with given fields: ctx, key
func (_m *CacheService) GetInt(ctx context.Context, key string) (int, error) {
	ret := _m.Called(ctx, key)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, key, value, exp
func (_m *CacheService) Set(ctx context.Context, key string, value interface{}, exp time.Duration) error {
	ret := _m.Called(ctx, key, value, exp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, exp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
